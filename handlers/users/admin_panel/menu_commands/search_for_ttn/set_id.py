from aiogram import types
from loader import dp

from aiogram.dispatcher import FSMContext
from sqlalchemy import update, delete, select
from aiogram import types
from loader import dp
from states.admin_panel.search_for_ttn.search_for_ttn_state import SearchForTtnAdmin
from utils.db_api.models import engine, Orders, Order_products, Storage


@dp.message_handler(text="–ü–æ–∏—Å–∫ –ø–æ –¢–¢–ù üóø")
async def get_storage_func(message: types.Message):
    await SearchForTtnAdmin.search_for_ttn.set()
    await message.answer("–¢–¢–ù –∑–∞–∫–∞–∑–∞?")


@dp.message_handler(state=SearchForTtnAdmin.search_for_ttn)
async def delete_order_func(message: types.Message, state: FSMContext):
    ttn = message.text
    conn = engine.connect()
    '''
       –ò—â–µ–º order_id, platform, full_price, date –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–¥–µ–ª–∞–Ω–æ–≥–æ –∞–¥–º–∏–Ω–æ–º
       '''
    info_orders = select([
        Orders.c.id,
        Orders.c.platform,
        Orders.c.price,
        Orders.c.date,
        Orders.c.ttn,
    ]).where(Orders.c.ttn == ttn)
    info_orders = conn.execute(info_orders)
    info_orders = info_orders.fetchall()

    if not info_orders:
        await message.answer("–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –¢–¢–ù –Ω–µ—Ç—Éüóø")
    else:
        for order in info_orders:

            order_id = order[0]
            platform = order[1]
            full_price = order[2]
            date = order[3]
            ttn = order[4]

            '''
            –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª—Ü—ã Order_products –∏ Storage –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
            '''

            joins = select([
                Order_products.c.quantity,
                Storage.c.title,
            ]).select_from(
                Order_products.join(Storage)
            ).where(Order_products.c.order_id == order_id)
            rs = conn.execute(joins)  # [(50, 12, '–õ—É—á—à—ñ')]
            conn.close()
            list_products = rs.fetchall()

            result = f"<i>{date}</i>\n" \
                     f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order_id}</b> <i>({platform})</i>\n\n" \
                     f"–¢–¢–ù <i>{ttn}</i>\n"

            for into in list_products:
                quantity = into[0]
                title = into[1]

                result += f"{title}\n" \
                          f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}—à—Ç</b>\n\n"

            result += f"= <b>{full_price} –≥—Ä–Ω</b>"

            await message.answer(result)
        conn.close()
    await state.finish()
